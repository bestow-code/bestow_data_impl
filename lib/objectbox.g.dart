// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'src/model/container/allocation/container_allocation.dart';
import 'src/model/container/container.dart';
import 'src/model/containment/containment.dart';
import 'src/model/image/image.dart';
import 'src/model/item/item.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3942856843747391931),
      name: 'ContainerAllocationImpl',
      lastPropertyId: const obx_int.IdUid(4, 2731629362685805439),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7629832928046297529),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4753296828789020583),
            name: 'fixedDisplayLength',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4986064031917747429),
            name: 'containerTypeUid',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2731629362685805439),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 631919185874798662))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4758348851240570094),
      name: 'ContainerImpl',
      lastPropertyId: const obx_int.IdUid(2, 7070040572947418676),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7334733925608100106),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7070040572947418676),
            name: 'containerKeyId',
            type: 11,
            flags: 552,
            indexId: const obx_int.IdUid(2, 8454696838802158671),
            relationTarget: 'ContainerKey')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 201502064591746983),
      name: 'ContainerKey',
      lastPropertyId: const obx_int.IdUid(5, 2366108104814553960),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2248529580112025717),
            name: 'number',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5608794060250420610),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8200132742601504442),
            name: 'refValue',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(3, 7268932971602809565)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 388719715605653060),
            name: 'kindValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2366108104814553960),
            name: 'sizeValue',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 1411327539912247744),
      name: 'ContainmentImpl',
      lastPropertyId: const obx_int.IdUid(1, 1792077160068562458),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1792077160068562458),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4834354785610939266),
      name: 'ImageImpl',
      lastPropertyId: const obx_int.IdUid(4, 5172832111994121474),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8902163505345209143),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5409323365732352682),
            name: 'itemToOneId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 6060343391740605288),
            relationTarget: 'ItemImpl'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3821480585334847161),
            name: 'refData',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(5, 628106939624701019)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5172832111994121474),
            name: 'token',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 1769375863416293412),
      name: 'ItemImpl',
      lastPropertyId: const obx_int.IdUid(3, 4490202215128900678),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3875117521387951627),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8199967709798450735),
            name: 'keyId',
            type: 11,
            flags: 552,
            indexId: const obx_int.IdUid(6, 7162447866931455442),
            relationTarget: 'ItemKey'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4490202215128900678),
            name: 'imageToOneId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 2293731334318588397),
            relationTarget: 'ImageImpl')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 9088551142315426944),
      name: 'ItemKey',
      lastPropertyId: const obx_int.IdUid(2, 1443662251334936724),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 383718524903869688),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1443662251334936724),
            name: 'refData',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(8, 4435345120392563269))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 9088551142315426944),
      lastIndexId: const obx_int.IdUid(8, 4435345120392563269),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ContainerAllocationImpl: obx_int.EntityDefinition<ContainerAllocationImpl>(
        model: _entities[0],
        toOneRelations: (ContainerAllocationImpl object) => [],
        toManyRelations: (ContainerAllocationImpl object) => {},
        getId: (ContainerAllocationImpl object) => object.id,
        setId: (ContainerAllocationImpl object, int id) {
          object.id = id;
        },
        objectToFB: (ContainerAllocationImpl object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.fixedDisplayLength);
          fbb.addInt64(2, object.containerTypeUid);
          fbb.addOffset(3, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final containerTypeUidParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final fixedDisplayLengthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ContainerAllocationImpl(
              containerTypeUidParam, fixedDisplayLengthParam,
              uid: uidParam, id: idParam);

          return object;
        }),
    ContainerImpl: obx_int.EntityDefinition<ContainerImpl>(
        model: _entities[1],
        toOneRelations: (ContainerImpl object) => [object.containerKey],
        toManyRelations: (ContainerImpl object) => {},
        getId: (ContainerImpl object) => object.id,
        setId: (ContainerImpl object, int id) {
          object.id = id;
        },
        objectToFB: (ContainerImpl object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.containerKey.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ContainerImpl(id: idParam);
          object.containerKey.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.containerKey.attach(store);
          return object;
        }),
    ContainerKey: obx_int.EntityDefinition<ContainerKey>(
        model: _entities[2],
        toOneRelations: (ContainerKey object) => [],
        toManyRelations: (ContainerKey object) => {},
        getId: (ContainerKey object) => object.id,
        setId: (ContainerKey object, int id) {
          object.id = id;
        },
        objectToFB: (ContainerKey object, fb.Builder fbb) {
          final refValueOffset = fbb.writeString(object.refValue);
          fbb.startTable(6);
          fbb.addInt64(0, object.number);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, refValueOffset);
          fbb.addInt64(3, object.kindValue);
          fbb.addInt64(4, object.sizeValue);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final refValueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final kindValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final sizeValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final numberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = ContainerKey(
              refValue: refValueParam,
              kindValue: kindValueParam,
              sizeValue: sizeValueParam,
              number: numberParam,
              id: idParam);

          return object;
        }),
    ContainmentImpl: obx_int.EntityDefinition<ContainmentImpl>(
        model: _entities[3],
        toOneRelations: (ContainmentImpl object) => [],
        toManyRelations: (ContainmentImpl object) => {},
        getId: (ContainmentImpl object) => object.id,
        setId: (ContainmentImpl object, int id) {
          object.id = id;
        },
        objectToFB: (ContainmentImpl object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ContainmentImpl(id: idParam);

          return object;
        }),
    ImageImpl: obx_int.EntityDefinition<ImageImpl>(
        model: _entities[4],
        toOneRelations: (ImageImpl object) => [object.itemToOne],
        toManyRelations: (ImageImpl object) => {},
        getId: (ImageImpl object) => object.id,
        setId: (ImageImpl object, int id) {
          object.id = id;
        },
        objectToFB: (ImageImpl object, fb.Builder fbb) {
          final refDataOffset = fbb.writeString(object.refData);
          final tokenOffset = fbb.writeString(object.token);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.itemToOne.targetId);
          fbb.addOffset(2, refDataOffset);
          fbb.addOffset(3, tokenOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final refDataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final tokenParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object =
              ImageImpl(refData: refDataParam, token: tokenParam, id: idParam);
          object.itemToOne.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.itemToOne.attach(store);
          return object;
        }),
    ItemImpl: obx_int.EntityDefinition<ItemImpl>(
        model: _entities[5],
        toOneRelations: (ItemImpl object) => [object.key, object.imageToOne],
        toManyRelations: (ItemImpl object) => {},
        getId: (ItemImpl object) => object.id,
        setId: (ItemImpl object, int id) {
          object.id = id;
        },
        objectToFB: (ItemImpl object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.key.targetId);
          fbb.addInt64(2, object.imageToOne.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ItemImpl(id: idParam);
          object.key.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.key.attach(store);
          object.imageToOne.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.imageToOne.attach(store);
          return object;
        }),
    ItemKey: obx_int.EntityDefinition<ItemKey>(
        model: _entities[6],
        toOneRelations: (ItemKey object) => [],
        toManyRelations: (ItemKey object) => {},
        getId: (ItemKey object) => object.id,
        setId: (ItemKey object, int id) {
          object.id = id;
        },
        objectToFB: (ItemKey object, fb.Builder fbb) {
          final refDataOffset = fbb.writeString(object.refData);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, refDataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final refDataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ItemKey(refData: refDataParam, id: idParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ContainerAllocationImpl] entity fields to define ObjectBox queries.
class ContainerAllocationImpl_ {
  /// See [ContainerAllocationImpl.id].
  static final id = obx.QueryIntegerProperty<ContainerAllocationImpl>(
      _entities[0].properties[0]);

  /// See [ContainerAllocationImpl.fixedDisplayLength].
  static final fixedDisplayLength =
      obx.QueryIntegerProperty<ContainerAllocationImpl>(
          _entities[0].properties[1]);

  /// See [ContainerAllocationImpl.containerTypeUid].
  static final containerTypeUid =
      obx.QueryIntegerProperty<ContainerAllocationImpl>(
          _entities[0].properties[2]);

  /// See [ContainerAllocationImpl.uid].
  static final uid = obx.QueryStringProperty<ContainerAllocationImpl>(
      _entities[0].properties[3]);
}

/// [ContainerImpl] entity fields to define ObjectBox queries.
class ContainerImpl_ {
  /// See [ContainerImpl.id].
  static final id =
      obx.QueryIntegerProperty<ContainerImpl>(_entities[1].properties[0]);

  /// See [ContainerImpl.containerKey].
  static final containerKey =
      obx.QueryRelationToOne<ContainerImpl, ContainerKey>(
          _entities[1].properties[1]);
}

/// [ContainerKey] entity fields to define ObjectBox queries.
class ContainerKey_ {
  /// See [ContainerKey.number].
  static final number =
      obx.QueryIntegerProperty<ContainerKey>(_entities[2].properties[0]);

  /// See [ContainerKey.id].
  static final id =
      obx.QueryIntegerProperty<ContainerKey>(_entities[2].properties[1]);

  /// See [ContainerKey.refValue].
  static final refValue =
      obx.QueryStringProperty<ContainerKey>(_entities[2].properties[2]);

  /// See [ContainerKey.kindValue].
  static final kindValue =
      obx.QueryIntegerProperty<ContainerKey>(_entities[2].properties[3]);

  /// See [ContainerKey.sizeValue].
  static final sizeValue =
      obx.QueryIntegerProperty<ContainerKey>(_entities[2].properties[4]);
}

/// [ContainmentImpl] entity fields to define ObjectBox queries.
class ContainmentImpl_ {
  /// See [ContainmentImpl.id].
  static final id =
      obx.QueryIntegerProperty<ContainmentImpl>(_entities[3].properties[0]);
}

/// [ImageImpl] entity fields to define ObjectBox queries.
class ImageImpl_ {
  /// See [ImageImpl.id].
  static final id =
      obx.QueryIntegerProperty<ImageImpl>(_entities[4].properties[0]);

  /// See [ImageImpl.itemToOne].
  static final itemToOne =
      obx.QueryRelationToOne<ImageImpl, ItemImpl>(_entities[4].properties[1]);

  /// See [ImageImpl.refData].
  static final refData =
      obx.QueryStringProperty<ImageImpl>(_entities[4].properties[2]);

  /// See [ImageImpl.token].
  static final token =
      obx.QueryStringProperty<ImageImpl>(_entities[4].properties[3]);
}

/// [ItemImpl] entity fields to define ObjectBox queries.
class ItemImpl_ {
  /// See [ItemImpl.id].
  static final id =
      obx.QueryIntegerProperty<ItemImpl>(_entities[5].properties[0]);

  /// See [ItemImpl.key].
  static final key =
      obx.QueryRelationToOne<ItemImpl, ItemKey>(_entities[5].properties[1]);

  /// See [ItemImpl.imageToOne].
  static final imageToOne =
      obx.QueryRelationToOne<ItemImpl, ImageImpl>(_entities[5].properties[2]);
}

/// [ItemKey] entity fields to define ObjectBox queries.
class ItemKey_ {
  /// See [ItemKey.id].
  static final id =
      obx.QueryIntegerProperty<ItemKey>(_entities[6].properties[0]);

  /// See [ItemKey.refData].
  static final refData =
      obx.QueryStringProperty<ItemKey>(_entities[6].properties[1]);
}
